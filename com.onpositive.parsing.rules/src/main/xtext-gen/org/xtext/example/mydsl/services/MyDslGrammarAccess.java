/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTokensAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokensTokenDefinitionParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTokensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTokensTokenDefinitionParserRuleCall_3_1_0 = (RuleCall)cTokensAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFunctionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFunctionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionsFunctionParserRuleCall_7_0 = (RuleCall)cFunctionsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFunctionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_8_1_0 = (RuleCall)cFunctionsAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLayersKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cLayersAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLayersLayerParserRuleCall_12_0 = (RuleCall)cLayersAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cLayersAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cLayersLayerParserRuleCall_13_1_0 = (RuleCall)cLayersAssignment_13_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRulesKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final RuleCall cBEGINTerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Assignment cRulesAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cRulesRuleParserRuleCall_17_0 = (RuleCall)cRulesAssignment_17.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_18 = (RuleCall)cGroup.eContents().get(18);
		
		//Model:
		//	"classes:"
		//	'['
		//	tokens+=TokenDefinition ("," tokens+=TokenDefinition)*
		//	']'
		//	"functions:"
		//	'['
		//	functions+=Function ("," functions+=Function)*
		//	']'
		//	"layers:"
		//	'['
		//	layers+=Layer ("," layers+=Layer)*
		//	']'
		//	"rules:"
		//	BEGIN
		//	rules+=Rule+
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//"classes:" '[' tokens+=TokenDefinition ("," tokens+=TokenDefinition)* ']' "functions:" '[' functions+=Function (","
		//functions+=Function)* ']' "layers:" '[' layers+=Layer ("," layers+=Layer)* ']' "rules:" BEGIN rules+=Rule+ END
		public Group getGroup() { return cGroup; }
		
		//"classes:"
		public Keyword getClassesKeyword_0() { return cClassesKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//tokens+=TokenDefinition
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }
		
		//TokenDefinition
		public RuleCall getTokensTokenDefinitionParserRuleCall_2_0() { return cTokensTokenDefinitionParserRuleCall_2_0; }
		
		//("," tokens+=TokenDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tokens+=TokenDefinition
		public Assignment getTokensAssignment_3_1() { return cTokensAssignment_3_1; }
		
		//TokenDefinition
		public RuleCall getTokensTokenDefinitionParserRuleCall_3_1_0() { return cTokensTokenDefinitionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//"functions:"
		public Keyword getFunctionsKeyword_5() { return cFunctionsKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_7() { return cFunctionsAssignment_7; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_7_0() { return cFunctionsFunctionParserRuleCall_7_0; }
		
		//("," functions+=Function)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_8_1() { return cFunctionsAssignment_8_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_8_1_0() { return cFunctionsFunctionParserRuleCall_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//"layers:"
		public Keyword getLayersKeyword_10() { return cLayersKeyword_10; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }
		
		//layers+=Layer
		public Assignment getLayersAssignment_12() { return cLayersAssignment_12; }
		
		//Layer
		public RuleCall getLayersLayerParserRuleCall_12_0() { return cLayersLayerParserRuleCall_12_0; }
		
		//("," layers+=Layer)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//layers+=Layer
		public Assignment getLayersAssignment_13_1() { return cLayersAssignment_13_1; }
		
		//Layer
		public RuleCall getLayersLayerParserRuleCall_13_1_0() { return cLayersLayerParserRuleCall_13_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_14() { return cRightSquareBracketKeyword_14; }
		
		//"rules:"
		public Keyword getRulesKeyword_15() { return cRulesKeyword_15; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_16() { return cBEGINTerminalRuleCall_16; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_17() { return cRulesAssignment_17; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_17_0() { return cRulesRuleParserRuleCall_17_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_18() { return cENDTerminalRuleCall_18; }
	}
	public class TransferModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TransferModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeqCallParserRuleCall_0_0 = (RuleCall)cSeqAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSeqAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSeqCallParserRuleCall_1_1_0 = (RuleCall)cSeqAssignment_1_1.eContents().get(0);
		
		//TransferModel:
		//	seq+=Call ('=>' seq+=Call)*;
		@Override public ParserRule getRule() { return rule; }
		
		//seq+=Call ('=>' seq+=Call)*
		public Group getGroup() { return cGroup; }
		
		//seq+=Call
		public Assignment getSeqAssignment_0() { return cSeqAssignment_0; }
		
		//Call
		public RuleCall getSeqCallParserRuleCall_0_0() { return cSeqCallParserRuleCall_0_0; }
		
		//('=>' seq+=Call)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }
		
		//seq+=Call
		public Assignment getSeqAssignment_1_1() { return cSeqAssignment_1_1; }
		
		//Call
		public RuleCall getSeqCallParserRuleCall_1_1_0() { return cSeqCallParserRuleCall_1_1_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFunctionCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgListParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOpQuestionMarkKeyword_4_0 = (Keyword)cOpAssignment_4.eContents().get(0);
		
		//Call:
		//	name=[Function] '(' args=ArgList? ')' op='?'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Function] '(' args=ArgList? ')' op='?'?
		public Group getGroup() { return cGroup; }
		
		//name=[Function]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Function]
		public CrossReference getNameFunctionCrossReference_0_0() { return cNameFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getNameFunctionIDTerminalRuleCall_0_0_1() { return cNameFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args=ArgList?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//ArgList
		public RuleCall getArgsArgListParserRuleCall_2_0() { return cArgsArgListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//op='?'?
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//'?'
		public Keyword getOpQuestionMarkKeyword_4_0() { return cOpQuestionMarkKeyword_4_0; }
	}
	public class ArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cAAssignment_1_1.eContents().get(0);
		
		//ArgList:
		//	a+=PrimaryExpression (',' a+=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//a+=PrimaryExpression (',' a+=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//a+=PrimaryExpression
		public Assignment getAAssignment_0() { return cAAssignment_0; }
		
		//PrimaryExpression
		public RuleCall getAPrimaryExpressionParserRuleCall_0_0() { return cAPrimaryExpressionParserRuleCall_0_0; }
		
		//(',' a+=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//a+=PrimaryExpression
		public Assignment getAAssignment_1_1() { return cAAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getAPrimaryExpressionParserRuleCall_1_1_0() { return cAPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Name");
		private final Assignment cVAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVIDTerminalRuleCall_0 = (RuleCall)cVAssignment.eContents().get(0);
		
		//Name:
		//	v=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//v=ID
		public Assignment getVAssignment() { return cVAssignment; }
		
		//ID
		public RuleCall getVIDTerminalRuleCall_0() { return cVIDTerminalRuleCall_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCCallParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCNameParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Assignment cCAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCIntLiteralParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Assignment cCAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCStringLiteralParserRuleCall_3_0 = (RuleCall)cCAssignment_3.eContents().get(0);
		
		//PrimaryExpression:
		//	c=Call | c=Name | c=IntLiteral | c=StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//c=Call | c=Name | c=IntLiteral | c=StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//c=Call
		public Assignment getCAssignment_0() { return cCAssignment_0; }
		
		//Call
		public RuleCall getCCallParserRuleCall_0_0() { return cCCallParserRuleCall_0_0; }
		
		//c=Name
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//Name
		public RuleCall getCNameParserRuleCall_1_0() { return cCNameParserRuleCall_1_0; }
		
		//c=IntLiteral
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//IntLiteral
		public RuleCall getCIntLiteralParserRuleCall_2_0() { return cCIntLiteralParserRuleCall_2_0; }
		
		//c=StringLiteral
		public Assignment getCAssignment_3() { return cCAssignment_3; }
		
		//StringLiteral
		public RuleCall getCStringLiteralParserRuleCall_3_0() { return cCStringLiteralParserRuleCall_3_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntLiteral");
		private final Assignment cVAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVINTTerminalRuleCall_0 = (RuleCall)cVAssignment.eContents().get(0);
		
		//IntLiteral:
		//	v=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//v=INT
		public Assignment getVAssignment() { return cVAssignment; }
		
		//INT
		public RuleCall getVINTTerminalRuleCall_0() { return cVINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringLiteral");
		private final Assignment cVAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVSTRINGTerminalRuleCall_0 = (RuleCall)cVAssignment.eContents().get(0);
		
		//StringLiteral:
		//	v=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//v=STRING
		public Assignment getVAssignment() { return cVAssignment; }
		
		//STRING
		public RuleCall getVSTRINGTerminalRuleCall_0() { return cVSTRINGTerminalRuleCall_0; }
	}
	public class SeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Seq");
		private final Assignment cSeqAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSeqOrExpParserRuleCall_0 = (RuleCall)cSeqAssignment.eContents().get(0);
		
		//Seq:
		//	seq+=OrExp+;
		@Override public ParserRule getRule() { return rule; }
		
		//seq+=OrExp+
		public Assignment getSeqAssignment() { return cSeqAssignment; }
		
		//OrExp
		public RuleCall getSeqOrExpParserRuleCall_0() { return cSeqOrExpParserRuleCall_0; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSeqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSeqSeqParserRuleCall_1_0 = (RuleCall)cSeqAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cOpQuestionMarkKeyword_3_1_0 = (Keyword)cOpAssignment_3_1.eContents().get(0);
		private final Assignment cOpAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final Keyword cOpAsteriskKeyword_3_2_0 = (Keyword)cOpAssignment_3_2.eContents().get(0);
		
		//Group:
		//	'(' seq=Seq ')' (op='+' | op='?' | op='*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' seq=Seq ')' (op='+' | op='?' | op='*')?
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//seq=Seq
		public Assignment getSeqAssignment_1() { return cSeqAssignment_1; }
		
		//Seq
		public RuleCall getSeqSeqParserRuleCall_1_0() { return cSeqSeqParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//(op='+' | op='?' | op='*')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//op='+'
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_3_0_0() { return cOpPlusSignKeyword_3_0_0; }
		
		//op='?'
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }
		
		//'?'
		public Keyword getOpQuestionMarkKeyword_3_1_0() { return cOpQuestionMarkKeyword_3_1_0; }
		
		//op='*'
		public Assignment getOpAssignment_3_2() { return cOpAssignment_3_2; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_3_2_0() { return cOpAsteriskKeyword_3_2_0; }
	}
	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptionsElementParserRuleCall_0_0 = (RuleCall)cOptionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOptionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOptionsElementParserRuleCall_1_1_0 = (RuleCall)cOptionsAssignment_1_1.eContents().get(0);
		
		//OrExp:
		//	options+=Element ('|' options+=Element)*;
		@Override public ParserRule getRule() { return rule; }
		
		//options+=Element ('|' options+=Element)*
		public Group getGroup() { return cGroup; }
		
		//options+=Element
		public Assignment getOptionsAssignment_0() { return cOptionsAssignment_0; }
		
		//Element
		public RuleCall getOptionsElementParserRuleCall_0_0() { return cOptionsElementParserRuleCall_0_0; }
		
		//('|' options+=Element)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//options+=Element
		public Assignment getOptionsAssignment_1_1() { return cOptionsAssignment_1_1; }
		
		//Element
		public RuleCall getOptionsElementParserRuleCall_1_1_0() { return cOptionsElementParserRuleCall_1_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValAssignParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValStringLiteralParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final Assignment cValAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValGroupParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Element:
		//	val=Assign | val=StringLiteral | val=Group;
		@Override public ParserRule getRule() { return rule; }
		
		//val=Assign | val=StringLiteral | val=Group
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=Assign
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//Assign
		public RuleCall getValAssignParserRuleCall_0_0() { return cValAssignParserRuleCall_0_0; }
		
		//val=StringLiteral
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//StringLiteral
		public RuleCall getValStringLiteralParserRuleCall_1_0() { return cValStringLiteralParserRuleCall_1_0; }
		
		//val=Group
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Group
		public RuleCall getValGroupParserRuleCall_2_0() { return cValGroupParserRuleCall_2_0; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cOpAsteriskEqualsSignKeyword_1_2_0 = (Keyword)cOpAssignment_1_2.eContents().get(0);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValTokenDefinitionCrossReference_2_0 = (CrossReference)cValAssignment_2.eContents().get(0);
		private final RuleCall cValTokenDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cValTokenDefinitionCrossReference_2_0.eContents().get(1);
		
		//Assign:
		//	name=ID (op='=' | op='+=' | op='*=') val=[TokenDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (op='=' | op='+=' | op='*=') val=[TokenDefinition]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(op='=' | op='+=' | op='*=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op='='
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }
		
		//op='+='
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_1_1_0() { return cOpPlusSignEqualsSignKeyword_1_1_0; }
		
		//op='*='
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//'*='
		public Keyword getOpAsteriskEqualsSignKeyword_1_2_0() { return cOpAsteriskEqualsSignKeyword_1_2_0; }
		
		//val=[TokenDefinition]
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//[TokenDefinition]
		public CrossReference getValTokenDefinitionCrossReference_2_0() { return cValTokenDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getValTokenDefinitionIDTerminalRuleCall_2_0_1() { return cValTokenDefinitionIDTerminalRuleCall_2_0_1; }
	}
	public class TokenDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TokenDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TokenDefinition:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Function");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Function:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Layer");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Layer:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionSeqParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenPartAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenPartTransferModelParserRuleCall_6_0 = (RuleCall)cThenPartAssignment_6.eContents().get(0);
		private final Keyword cExampleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExampleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExampleSTRINGTerminalRuleCall_8_0 = (RuleCall)cExampleAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLayerKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cLayerAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cLayerLayerCrossReference_9_1_0 = (CrossReference)cLayerAssignment_9_1.eContents().get(0);
		private final RuleCall cLayerLayerIDTerminalRuleCall_9_1_0_1 = (RuleCall)cLayerLayerCrossReference_9_1_0.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Rule:
		//	name=ID ":"
		//	BEGIN
		//	'when:' condition=Seq
		//	'then:' thenPart=TransferModel
		//	'example:' example=STRING ('layer:' layer=[Layer])?
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" BEGIN 'when:' condition=Seq 'then:' thenPart=TransferModel 'example:' example=STRING ('layer:'
		//layer=[Layer])? END
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//'when:'
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//condition=Seq
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Seq
		public RuleCall getConditionSeqParserRuleCall_4_0() { return cConditionSeqParserRuleCall_4_0; }
		
		//'then:'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//thenPart=TransferModel
		public Assignment getThenPartAssignment_6() { return cThenPartAssignment_6; }
		
		//TransferModel
		public RuleCall getThenPartTransferModelParserRuleCall_6_0() { return cThenPartTransferModelParserRuleCall_6_0; }
		
		//'example:'
		public Keyword getExampleKeyword_7() { return cExampleKeyword_7; }
		
		//example=STRING
		public Assignment getExampleAssignment_8() { return cExampleAssignment_8; }
		
		//STRING
		public RuleCall getExampleSTRINGTerminalRuleCall_8_0() { return cExampleSTRINGTerminalRuleCall_8_0; }
		
		//('layer:' layer=[Layer])?
		public Group getGroup_9() { return cGroup_9; }
		
		//'layer:'
		public Keyword getLayerKeyword_9_0() { return cLayerKeyword_9_0; }
		
		//layer=[Layer]
		public Assignment getLayerAssignment_9_1() { return cLayerAssignment_9_1; }
		
		//[Layer]
		public CrossReference getLayerLayerCrossReference_9_1_0() { return cLayerLayerCrossReference_9_1_0; }
		
		//ID
		public RuleCall getLayerLayerIDTerminalRuleCall_9_1_0_1() { return cLayerLayerIDTerminalRuleCall_9_1_0_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_10() { return cENDTerminalRuleCall_10; }
	}
	
	
	private final ModelElements pModel;
	private final TransferModelElements pTransferModel;
	private final CallElements pCall;
	private final ArgListElements pArgList;
	private final NameElements pName;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	private final SeqElements pSeq;
	private final GroupElements pGroup;
	private final OrExpElements pOrExp;
	private final ElementElements pElement;
	private final AssignElements pAssign;
	private final TokenDefinitionElements pTokenDefinition;
	private final FunctionElements pFunction;
	private final LayerElements pLayer;
	private final RuleElements pRule;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTransferModel = new TransferModelElements();
		this.pCall = new CallElements();
		this.pArgList = new ArgListElements();
		this.pName = new NameElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pSeq = new SeqElements();
		this.pGroup = new GroupElements();
		this.pOrExp = new OrExpElements();
		this.pElement = new ElementElements();
		this.pAssign = new AssignElements();
		this.pTokenDefinition = new TokenDefinitionElements();
		this.pFunction = new FunctionElements();
		this.pLayer = new LayerElements();
		this.pRule = new RuleElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"classes:"
	//	'['
	//	tokens+=TokenDefinition ("," tokens+=TokenDefinition)*
	//	']'
	//	"functions:"
	//	'['
	//	functions+=Function ("," functions+=Function)*
	//	']'
	//	"layers:"
	//	'['
	//	layers+=Layer ("," layers+=Layer)*
	//	']'
	//	"rules:"
	//	BEGIN
	//	rules+=Rule+
	//	END;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TransferModel:
	//	seq+=Call ('=>' seq+=Call)*;
	public TransferModelElements getTransferModelAccess() {
		return pTransferModel;
	}
	
	public ParserRule getTransferModelRule() {
		return getTransferModelAccess().getRule();
	}
	
	//Call:
	//	name=[Function] '(' args=ArgList? ')' op='?'?;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ArgList:
	//	a+=PrimaryExpression (',' a+=PrimaryExpression)*;
	public ArgListElements getArgListAccess() {
		return pArgList;
	}
	
	public ParserRule getArgListRule() {
		return getArgListAccess().getRule();
	}
	
	//Name:
	//	v=ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//PrimaryExpression:
	//	c=Call | c=Name | c=IntLiteral | c=StringLiteral;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//IntLiteral:
	//	v=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	v=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Seq:
	//	seq+=OrExp+;
	public SeqElements getSeqAccess() {
		return pSeq;
	}
	
	public ParserRule getSeqRule() {
		return getSeqAccess().getRule();
	}
	
	//Group:
	//	'(' seq=Seq ')' (op='+' | op='?' | op='*')?;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//OrExp:
	//	options+=Element ('|' options+=Element)*;
	public OrExpElements getOrExpAccess() {
		return pOrExp;
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}
	
	//Element:
	//	val=Assign | val=StringLiteral | val=Group;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Assign:
	//	name=ID (op='=' | op='+=' | op='*=') val=[TokenDefinition];
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//TokenDefinition:
	//	name=ID;
	public TokenDefinitionElements getTokenDefinitionAccess() {
		return pTokenDefinition;
	}
	
	public ParserRule getTokenDefinitionRule() {
		return getTokenDefinitionAccess().getRule();
	}
	
	//Function:
	//	name=ID;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Layer:
	//	name=ID;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//Rule:
	//	name=ID ":"
	//	BEGIN
	//	'when:' condition=Seq
	//	'then:' thenPart=TransferModel
	//	'example:' example=STRING ('layer:' layer=[Layer])?
	//	END;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
